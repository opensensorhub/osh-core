/***************************** BEGIN LICENSE BLOCK ***************************

The contents of this file are subject to the Mozilla Public License, v. 2.0.
If a copy of the MPL was not distributed with this file, You can obtain one
at http://mozilla.org/MPL/2.0/.

Software distributed under the License is distributed on an "AS IS" basis,
WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
for the specific language governing rights and limitations under the License.
 
Copyright (C) 2012-2015 Sensia Software LLC. All Rights Reserved.
 
******************************* END LICENSE BLOCK ***************************/

package org.sensorhub.impl.service.sps;

import java.util.stream.Collectors;
import org.sensorhub.api.common.SensorHubException;
import org.sensorhub.api.datastore.command.CommandFilter;
import org.sensorhub.impl.service.swe.SWEService;
import org.vast.ows.sps.SPSServiceCapabilities;
import com.google.common.base.Strings;


/**
 * <p>
 * Implementation of SensorHub generic SPS service.
 * The service can manage any of the sensors installed on the SensorHub instance
 * and is configured automatically from the information generated by the sensors
 * interfaces.
 * </p>
 *
 * @author Alex Robin
 * @since Jan 15, 2015
 */
public class SPSService extends SWEService<SPSServiceConfig>
{
    
    @Override
    protected void doInit() throws SensorHubException
    {
        super.doInit();
        
        // validate config
        for (var connectorConfig: config.customConnectors)
        {
            if (Strings.isNullOrEmpty(connectorConfig.systemUID))
                throw new SensorHubException("Connector configuration must specify a procedure unique ID");
        }       
        
        this.securityHandler = new SPSSecurity(this, config.security.enableAccessControl);
    }
    
    
    protected CommandFilter getResourceFilter()
    {
        if (config.exposedResources != null)
        {
            return config.exposedResources.getCommandFilter();
        }
        
        // else if some custom providers are configured, build a filter to expose them (and nothing else)
        else if (config.exposedResources == null && config.customConnectors != null && !config.customConnectors.isEmpty())
        {
            var sysUIDs = config.customConnectors.stream()
                .map(config -> config.systemUID)
                .collect(Collectors.toSet());
            
            return new CommandFilter.Builder()
                .withSystems().withUniqueIDs(sysUIDs).done()
                .build();
        }
        
        return null;
    }
    
    
    @Override
    protected void doStart() throws SensorHubException
    {
        super.doStart();
        
        // deploy servlet
        servlet = new SPSServlet(this, (SPSSecurity)this.securityHandler, getLogger());
        deploy();
    }


    public SPSServiceCapabilities getCapabilities()
    {
        if (isStarted())
            return (SPSServiceCapabilities)servlet.updateCapabilities();
        else
            return null;
    }


    public SPSServlet getServlet()
    {
        return (SPSServlet)servlet;
    }
}
